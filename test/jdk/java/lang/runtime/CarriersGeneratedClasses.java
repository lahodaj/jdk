/*
 * Copyright (c) 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * @test
 * @summary Count classes generated by Carriers
 * @modules java.base/java.lang.runtime
 * @enablePreview true
 * @compile CarriersGeneratedClasses.java
 * @run main/othervm CarriersGeneratedClasses measureAndPrint arrays
 * @run main/othervm CarriersGeneratedClasses measureAndPrint default
 * @run main/othervm CarriersGeneratedClasses measureAndPrint generating
 * @run main/othervm CarriersGeneratedClasses verifyGeneratedClassesCount arrays
 * @run main/othervm CarriersGeneratedClasses verifyGeneratedClassesCount default
 */
// * @run main/othervm CarriersGeneratedClasses verifyGeneratedClassesCount generating
// * @run main/othervm CarriersGeneratedClasses printTrace arrays
// * @run main/othervm CarriersGeneratedClasses printTrace default
// * @run main/othervm CarriersGeneratedClasses printTrace generating

import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodType;
import java.lang.runtime.ArrayCarriers;
import java.lang.runtime.Carriers;
import java.lang.runtime.GeneratingCarriers;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.Function;
import jdk.jfr.consumer.RecordedClass;
import jdk.jfr.consumer.RecordedEvent;
import jdk.jfr.consumer.RecordedFrame;
import jdk.jfr.consumer.RecordedStackTrace;
import jdk.jfr.consumer.RecordingStream;

public class CarriersGeneratedClasses {
    private static final CarriersConfiguration ARRAY_CARRIERS_CONFIGURATION = new CarriersConfiguration(ArrayCarriers.class.getName(), ArrayCarriers::initializingConstructor, ArrayCarriers::component);
    private static final CarriersConfiguration DEFAULT_CARRIERS_CONFIGURATION = new CarriersConfiguration(Carriers.class.getName(), Carriers::initializingConstructor, Carriers::component);
    private static final CarriersConfiguration GENERATING_CARRIERS_CONFIGURATION = new CarriersConfiguration(GeneratingCarriers.class.getName(), GeneratingCarriers::initializingConstructor, GeneratingCarriers::component);

    public static void main(String[] args) throws Throwable {
        System.err.println("==========================configuration: " + args[1] + ", method: " + args[0] + "==============================");
        CarriersConfiguration configuration = switch (args[1]) {
            case "arrays" -> ARRAY_CARRIERS_CONFIGURATION;
            case "default" -> DEFAULT_CARRIERS_CONFIGURATION;
            case "generating" -> GENERATING_CARRIERS_CONFIGURATION;
            default -> throw new AssertionError("Unknown carriers configuration: " + args[1]);
        };
        switch (args[0]) {
            case "measureAndPrint" -> measureAndPrint(configuration);
            case "printTrace" -> printTrace(configuration);
            case "verifyGeneratedClassesCount" -> verifyGeneratedClassesCount(configuration);
            default -> throw new AssertionError("Unknown method.");
        }
    }

    static void measureAndPrint(CarriersConfiguration configuration) throws Throwable {
        MethodType[] tests = new MethodType[] {
            MethodType.methodType(Object.class),
            MethodType.methodType(Object.class, Object.class),
            MethodType.methodType(Object.class, Object.class, Object.class),
            MethodType.methodType(Object.class, String.class, Object.class),
            MethodType.methodType(Object.class, Object.class, String.class),
            MethodType.methodType(Object.class, Object.class, Object.class, Object.class),
            MethodType.methodType(Object.class, String.class, Object.class, Object.class),
            MethodType.methodType(Object.class, Object.class, String.class, Object.class),
            MethodType.methodType(Object.class, Object.class, String.class, String.class),
            MethodType.methodType(Object.class, int.class, Object.class, Object.class),
            MethodType.methodType(Object.class, Object.class, int.class, Object.class),
            MethodType.methodType(Object.class, Object.class, Object.class, int.class),
            MethodType.methodType(Object.class, int.class, int.class, Object.class),
            MethodType.methodType(Object.class, long.class, int.class, Object.class),
            MethodType.methodType(Object.class, float.class, int.class, Object.class),
            MethodType.methodType(Object.class, double.class, int.class, Object.class),
            MethodType.methodType(Object.class, int.class, double.class, Object.class),
        };


        for (MethodType testCase : tests) {
            System.err.println("running: " + testCase);
            System.err.println("total loaded classes: " + countLoadedClasses(configuration, testCase, false));
        }
    }

    static void printTrace(CarriersConfiguration configuration) throws Throwable {
        countLoadedClasses(configuration, MethodType.methodType(Object.class, Object.class, Object.class), false);
        countLoadedClasses(configuration, MethodType.methodType(Object.class, String.class, Object.class), true);
    }

    static void verifyGeneratedClassesCount(CarriersConfiguration configuration) throws Throwable {
        countLoadedClasses(configuration, MethodType.methodType(Object.class, Object.class, Object.class), false);
        countLoadedClasses(configuration, MethodType.methodType(Object.class, String.class, Object.class), false);
        assertLoadedClasses(configuration, MethodType.methodType(Object.class, Object.class, String.class), 0);

        countLoadedClasses(configuration, MethodType.methodType(Object.class, int.class, Object.class), false);
        for (int i = 0; i < 100; i++) {
            assertLoadedClasses(configuration, MethodType.methodType(Object.class, int.class, String.class), 0);
        }
    }

    private static void assertLoadedClasses(CarriersConfiguration configuration,
                                            MethodType testCase,
                                            int expectedClasses) {
        int loaded = countLoadedClasses(configuration, testCase, false);
        if (loaded != expectedClasses) {
            throw new AssertionError("Unexpected loaded classes, expected " + expectedClasses + ", got: " + loaded);
        }
    }

    private static int countLoadedClasses(CarriersConfiguration configuration,
                                          MethodType testCase,
                                          boolean printTraces) {
        try (var rs = new RecordingStream()) {
            AtomicInteger loadedClasses = new AtomicInteger();

            rs.enable("jdk.ClassLoad");
            rs.onEvent(evt -> {
                RecordedStackTrace trace = evt.getStackTrace();
                boolean important = false;
                if (trace == null) {
                    important = true;
                } else {
                    for (RecordedFrame frame : trace.getFrames()) {
                        if (frame.getMethod().getType().getName().startsWith(configuration.carriersClass())) {
                            important = true;
                            break;
                        }
                    }
                }
                if (important) {
                    loadedClasses.incrementAndGet();
                    if (printTraces) {
                        printClassLoadEvent(evt);
                    }
                }
            });

            rs.startAsync();

            configuration.initializer().apply(testCase);

            for (int c = 0; c < testCase.parameterCount(); c++) {
                configuration.component().apply(testCase, c);
            }

            rs.stop();

            return loadedClasses.get();
        }
    }

    private static void printClassLoadEvent(RecordedEvent evt) {
        RecordedStackTrace trace = evt.getStackTrace();
        RecordedClass clazz = evt.getClass("loadedClass");
        String className = clazz != null ? clazz.getName() : "<unknown>";

        if (trace == null) {
            System.err.println("loaded: " + className + ", without a trace");
        } else {
            System.err.println("loaded: " + className + ", trace:");
            for (RecordedFrame frame2 : trace.getFrames()) {
                String frameClassName = frame2.getMethod().getType().getName();
                int dot = frameClassName.lastIndexOf('.');
                String simpleName = frameClassName.substring(dot + 1);
                System.err.println("    at " + frameClassName + "." + frame2.getMethod().getName() + "(" + simpleName + ".java:" + frame2.getLineNumber() + ")");
            }
        }
    }

    private record CarriersConfiguration(String carriersClass,
                                         Function<MethodType, MethodHandle> initializer,
                                         BiFunction<MethodType, Integer, MethodHandle> component) {}

}
